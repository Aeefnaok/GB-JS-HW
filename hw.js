'use strict'

/*1. Объясните почему код даёт именно такие результаты?
Подсказка. Чтобы лучше разобраться возьмите этот код и запустите в отладчике в браузере со
включенными точками остановки
*/

// пример 1
let a = 1, b = 1, c, d
c = ++a
alert(c) // ответ: 2, c ссылается на префиксный инкремент a 
// (сначала увеличивается значение переменной a на 1, а потом она записывается как значение переменной c)

// пример 2
d = b++
alert(d) // ответ: 1, d ссылается на постфикный инкремент b 
// (сначала переменная b записывается в значение переменной d, а потом значение переменной b увеличивается на 1)

// пример 3
c = 2 + ++a // ответ: 5, к 2 прибавляется префиксный инкремент a 
// (сначала увеличится значение переменной a, а потом к нему прибавляется 2)

//пример 4
d = 2 + b++
alert(d); //ответ: 4, к 2 прибавляется постфиксный инкремент b
// (сначала к 2 прибавляется значение переменной b, а потом значение переменной b увеличивается на 1)

alert(a) // 3
alert(b) // 3

/*2. Чему будут равны переменные x и a в примере ниже? Написать почему так произошло 
(описать последовательность действий).*/
let y = 2
let x = 1 + (y *= 2) // сначала происходит умножение с присваиванием переменной y и к результату прибавляется 1

/*3. Объявить две переменные a и b и задать им целочисленные произвольные начальные
значения.
Затем написать скрипт, который работает по следующему принципу:
- если a и b положительные, вывести их разность (ноль можно считать положительным числом);
- если а и b отрицательные, вывести их произведение;
- * (этот пункт по сложнее, делайте по желанию) если а и b разных знаков, вывести их сумму;*/

let num1 = -2, num2 = 3

if (num1 >= 0 && num2 >= 0) {
    alert(num1 - num2)
}
else if (num1 < 0 && num2 < 0) {
    alert(num1 * num2)
}
else if (num1 > 0 && num2 < 0 || num1 < 0 && num2 > 0) {
    alert(num1 + num2)
}
/*4. Реализовать основные 4 арифметические операции (+, -, /, *) в виде функций с двумя
параметрами. Т.е. например, функция для сложения должна принимать два числа, складывать их
и возвращать результат.
Обязательно использовать оператор return.*/
function sum(param1, param2) {
    return param1 + param2
}

function diff(param1, param2) {
    return param1 - param2
}

function div(param1, param2) {
    return param1 / param2
}

function mult(param1, param2) {
    return param1 * param2
}
/*5. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от
переданного значения операции (использовать switch) выполнить одну из арифметических
операций
(использовать функции из задания 4) и вернуть полученное значение.*/

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case '+':
            return sum(arg1, arg2)
        case '-':
            return diff(arg1, arg2)
        case '/':
            return div(arg1, arg2)
        case '*':
            return mult(arg1, arg2)
    }
}

console.log(mathOperation(5, 8, '+'))
console.log(mathOperation(5, 8, '-'))
console.log(mathOperation(5, 8, '/'))
console.log(mathOperation(5, 8, '*'))